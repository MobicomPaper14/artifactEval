'''
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

Created by: Om Chabra
Created on: 14 Jul 2023
@desc
    This module implements the summarizer for summarizing the Power model. For more details, please refer to the smapowerbasic.py module. It provides summaries for the following metrics:

        1. Percent charging: The percentage of time the satellite is able to charge.
        2. Average power generation: The average power generated in one timestep.
        3. Average power consumption: The average power consumed in one timestep.
        4. Number of times when the battery was empty: The count of times the battery was empty.
        5. Average battery level: The average battery level in one timestep.
        6. Average power consumption by component: The average power consumed by each component in one timestep.
        7. Max component: The name of the component that consumed the maximum power.
        8. Number of denials: The number of times a request to consume power was denied.
'''
from src.analytics.summarizers.isummarizers import ISummarizer


class SummarizerPower(ISummarizer):
    @property
    def iName(self) -> 'str':
        """
        @type 
            str
        @desc
            A string representing the name of the summarizer class. For example, summarizerlatency 
            Note that the name should exactly match to your class name. 
        """
        return self.__class__.__name__
    
    @property
    def supportedSMANames(self) -> 'list[str]':
        '''
        @type
            String
        @desc
            supportedSMANames gives the list of name of the SMAs, the output of which this SMA can process.
        '''
        return ['SMAPowerBasic']

    @property
    def supportedSummarizerNames(self) -> 'list[str]':
        '''
        @type
            List of String
        @desc
            supportedSummarizerNames gives the list of name of the Summarizers, the output of which this Summarizer can process.
        '''
        return []

    def call_APIs(
            self, 
            _apiName: str, 
            **_kwargs):
        '''
        This method acts as an API interface of the summarizer. 
        An API offered by the summarizer can be invoked through this method.
        @param[in] _apiName
            Name of the API. Each summarizer should have a list of the API names.
        @param[in]  _kwargs
            Keyworded arguments that are passed to the corresponding API handler
        @return
            The API return
        '''
        pass
    
    def __calculate_ChargingTime(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates what percent of time the battery was charging
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A number between 0 and 1
        """
        _totalTimes = _powerModelResult.shape[0]
        _timesWhenCharging = _powerModelResult[_powerModelResult['chargeGenerated'] > 0].shape[0]
        return _timesWhenCharging / _totalTimes
    
    def __calculate_PowerGeneration(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the average power generated by the solar panel in one timestep
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A number
        """
        return _powerModelResult['chargeGenerated'].mean()
    
    def __calculate_PowerConsumption(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the average power consumed by the components in one timestep
        @return
            A number
        """
        #Find all the columns that start with consumed
        _consumptionCols = [x for x in _powerModelResult.columns if x.startswith('consumed')]
        #Now we need to sum all the columns into another column
        _sum = _powerModelResult[_consumptionCols].sum(axis=1)
        #Now we need to find the average of the sum
        _avg = _sum.mean()
        return _avg

    def __calculate_TimesWhenBatteryWasEmpty(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the number of times the battery was empty
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A number
        """
        _timesWhenBatteryWasEmpty = _powerModelResult[_powerModelResult['outOfPower'] == "True"].shape[0]
        return _timesWhenBatteryWasEmpty
    
    def __calculate_AverageBatteryLevel(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the average battery level
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A number
        """
        return _powerModelResult['currentCharge'].mean()
    
    def __calculate_PowerConsumptionByComponent(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the average power consumed by each component in one timestep
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A dictionary where the key is the name of the component and the value is the power consumed by that component
        """
        #We need to first find out the number of components
        _cols = _powerModelResult.columns
        _tagColumns = [x for x in _cols if x.startswith('tag')]

        #The value of the tag is the name of the component. It is the same for all the rows
        _tags = [_powerModelResult[x].iloc[0] for x in _tagColumns]
        
        _powerConsumptionByComponent = {}
        
        #Now we need to calculate the average power consumed by each component
        for i in range(len(_tags)):
            _powerConsumptionByComponent[_tags[i]] = _powerModelResult['consumed' + str(i)].mean()
        return _powerConsumptionByComponent
    
    def __calculate_MaxComponent(self, _consumptionByComponent: 'dict'):
        """
        @desc
            This method calculates the name of the component that consumed the maximum power
        @param[in]
            _consumptionByComponent: __calculate_PowerConsumptionByComponent
        @return
            A string representing the name of the component that consumed the maximum power
        """
        _max = 0
        _maxComponent = ""
        for k, v in _consumptionByComponent.items():
            if v > _max:
                _max = v
                _maxComponent = k
        
        return _maxComponent

    def __calculate_NumberOfDenials(self, _powerModelResult: 'DataFrame'):
        """
        @desc
            This method calculates the number of times when a request to consume power was denied
        @param[in]
            _powerModelResult: The result of the power model's SMA
        @return
            A dictionary where the key is the name of the component and the value is the number of times when a request to consume power was denied
        """
        #We need to first find out the number of components
        _cols = _powerModelResult.columns
        _tagColumns = [x for x in _cols if x.startswith('tag')]
        
        _tags = [_powerModelResult[x].iloc[0] for x in _tagColumns]
        _denialsByComponent = {}
        
        #If it is denied, the value of the granted column is False
        for i in range(len(_tags)):
            _colName = 'granted' + str(i)
            _num = _powerModelResult[_powerModelResult[_colName] == False].shape[0]
            _denialsByComponent[_tags[i]] = _num
        
        return _denialsByComponent
    
    def Execute(self):
        """
        This method executes the tasks that needed to be performed by the summarizer.
        """
        _dict = {}
        #Let's calculate the metrics
        _powerModelResult = self.__smaPowerModel.get_Results()
        
        #Percent of time the satellite gets to charge
        _dict['percentCharging'] = self.__calculate_ChargingTime(_powerModelResult)
        #Average power generated in one timestep
        _dict['averagePowerGeneration'] = self.__calculate_PowerGeneration(_powerModelResult)
        #Average power consumed in one timestep
        _dict['averagePowerConsumption'] = self.__calculate_PowerConsumption(_powerModelResult)
        #Number of times when the battery was empty
        _dict['numberOfTimesWhenBatteryWasEmpty'] = self.__calculate_TimesWhenBatteryWasEmpty(_powerModelResult)
        #Average power consumed in one timestep
        _dict['averageBatteryLevel'] = self.__calculate_AverageBatteryLevel(_powerModelResult)
        #Average power consumed by each component in one timestep
        _dict['averagePowerConsumptionByComponent'] = self.__calculate_PowerConsumptionByComponent(_powerModelResult)
        #Name of the component that consumed the maximum power
        _dict['maxComponent'] = self.__calculate_MaxComponent(_dict['averagePowerConsumptionByComponent'])
        #Number of times when a request to consume power was denied
        _dict['numberOfDenials'] = self.__calculate_NumberOfDenials(_powerModelResult)
        self.__results = _dict
    
    def get_Results(self) -> 'dict':
        '''
        @desc
            This method returns the results of the  in the form of a dictionary where the key is the name of the metric and the value is the results.
        @return
            The results of the summarizer in the form of a dictionary where the key is the name of the metric and the value is the results.
        '''
        return self.__results
    
    def __init__(self,
                 _smaPowerModel: 'ISMA'):
        '''
        @desc
            Constructor of the class
        @param[in] _smaPowerModel
            The SMA for the power model
        '''
        self.__smaPowerModel = _smaPowerModel
        self.__results = {}

def init_SummarizerPower(**_kwargs):
    """
    @desc
        Initializes the SummarizerPower class
    @param[in] _kwargs
        Keyworded arguments that are passed to the constructor of the SummarizerPower class
        @key _powerModelSMA 
            The SMA for the power model
    @return
        An instance of the SummarizerPower class
    """
    if '_powerModelSMA' in _kwargs:
        return SummarizerPower(_kwargs['_powerModelSMA'])
    else:
        raise Exception('[Simulator Exception] SummarizerPower: No _powerModelSMA provided')
